{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar splitGraphemeClusters = require( '@stdlib/string-split-grapheme-clusters' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isStringArray = require( '@stdlib/assert-is-string-array' ).primitives;\nvar replace = require( '@stdlib/string-replace' );\nvar rescape = require( '@stdlib/utils-escape-regexp-string' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar WHITESPACE_CHARS = '\\u0020\\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\n\n\n// MAIN //\n\n/**\n* Trims `n` characters from the beginning of a string.\n*\n* @param {string} str - input string\n* @param {NonNegativeInteger} n - number of characters to trim\n* @param {(string|StringArray)} [chars] - characters to trim (defaults to whitespace characters)\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a string or an array of strings\n* @returns {string} trimmed string\n*\n* @example\n* var str = '   abc   ';\n* var out = ltrimN( str, 2 );\n* // returns ' abc   '\n*\n* @example\n* var str = '   abc   ';\n* var out = ltrimN( str, str.length );\n* // returns 'abc   '\n*\n* @example\n* var str = '~~abc!~~';\n* var out = ltrimN( str, str.length, [ '~', '!' ] );\n* // returns 'abc!~~'\n*\n* @example\n* var str = '\uD83E\uDD16\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDFA8\uD83E\uDD16\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDFA8\uD83E\uDD16\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDFA8';\n* var out = ltrimN( str, str.length, '\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDFA8\uD83E\uDD16' );\n* // returns ''\n*/\nfunction ltrimN( str, n, chars ) {\n\tvar nElems;\n\tvar reStr;\n\tvar isStr;\n\tvar RE;\n\tvar i;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', n ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tisStr = isString( chars );\n\t\tif ( !isStr && !isStringArray( chars ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a string or an array of strings. Value: `%s`.', chars ) );\n\t\t}\n\t\tif ( isStr ) {\n\t\t\tchars = splitGraphemeClusters( chars );\n\t\t}\n\t\tnElems = chars.length - 1;\n\t\treStr = '';\n\t\tfor ( i = 0; i < nElems; i++ ) {\n\t\t\treStr += rescape( chars[ i ] );\n\t\t\treStr += '|';\n\t\t}\n\t\treStr += rescape( chars[ nElems ] );\n\n\t\t// Case: Trim a specific set of characters from the beginning of a string..\n\t\tRE = new RegExp( '^(?:' + reStr + '){0,'+n+'}' );\n\t} else {\n\t\t// Case: Trim `n` whitespace characters from the beginning of a string...\n\t\tRE = new RegExp( '^[' + WHITESPACE_CHARS + ']{0,'+n+'}' );\n\t}\n\treturn replace( str, RE, '' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ltrimN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Trim `n` characters from the beginning of a string.\n*\n* @module @stdlib/string-left-trim-n\n*\n* @example\n* var ltrimN = require( '@stdlib/string-left-trim-n' );\n*\n* var str = 'foo  ';\n* var out = ltrimN( str, str.length );\n* // returns 'foo  '\n*\n* str = '\uD83D\uDC36\uD83D\uDC36\uD83D\uDC36 Animals \uD83D\uDC36\uD83D\uDC36\uD83D\uDC36';\n* out = ltrimN( str, 4, [ '\uD83D\uDC36', ' ' ] );\n* // returns 'Animals \uD83D\uDC36\uD83D\uDC36\uD83D\uDC36'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAwB,QAAS,wCAAyC,EAC1EC,EAAuB,QAAS,uCAAwC,EAAE,YAC1EC,EAAgB,QAAS,gCAAiC,EAAE,WAC5DC,EAAU,QAAS,wBAAyB,EAC5CC,EAAU,QAAS,oCAAqC,EACxDC,EAAS,QAAS,uBAAwB,EAK1CC,EAAmB,wEAoCvB,SAASC,EAAQC,EAAKC,EAAGC,EAAQ,CAChC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAK,CAAChB,EAAUS,CAAI,EACnB,MAAM,IAAI,UAAWH,EAAQ,kEAAmEG,CAAI,CAAE,EAEvG,GAAK,CAACP,EAAsBQ,CAAE,EAC7B,MAAM,IAAI,UAAWJ,EAAQ,gFAAiFI,CAAE,CAAE,EAEnH,GAAK,UAAU,OAAS,EAAI,CAE3B,GADAI,EAAQd,EAAUW,CAAM,EACnB,CAACG,GAAS,CAACX,EAAeQ,CAAM,EACpC,MAAM,IAAI,UAAWL,EAAQ,yFAA0FK,CAAM,CAAE,EAOhI,IALKG,IACJH,EAAQV,EAAuBU,CAAM,GAEtCC,EAASD,EAAM,OAAS,EACxBE,EAAQ,GACFG,EAAI,EAAGA,EAAIJ,EAAQI,IACxBH,GAASR,EAASM,EAAOK,CAAE,CAAE,EAC7BH,GAAS,IAEVA,GAASR,EAASM,EAAOC,CAAO,CAAE,EAGlCG,EAAK,IAAI,OAAQ,OAASF,EAAQ,OAAOH,EAAE,GAAI,CAChD,MAECK,EAAK,IAAI,OAAQ,KAAOR,EAAmB,OAAOG,EAAE,GAAI,EAEzD,OAAON,EAASK,EAAKM,EAAI,EAAG,CAC7B,CAKAhB,EAAO,QAAUS,ICtEjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isString", "splitGraphemeClusters", "isNonNegativeInteger", "isStringArray", "replace", "rescape", "format", "WHITESPACE_CHARS", "ltrimN", "str", "n", "chars", "nElems", "reStr", "isStr", "RE", "i", "main"]
}
